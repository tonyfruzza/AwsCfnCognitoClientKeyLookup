AWSTemplateFormatVersion: 2010-09-09
Description: The AWS CloudFormation template for looking up
Parameters:
  UserPoolId:
    Type: String
  ClientId:
    Type: String
Resources:
  LookupLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LookupLambdaFunction}"
      RetentionInDays: 1
  IamRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Join
            - '-'
            - - common
              - cfn-lookup-cognito-app-key2
              - lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - cognito-idp:DescribeUserPoolClient
                Resource:
                  - '*'
      Path: /
  LookupLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import os
          import json
          import boto3
          import requests

          def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
              # From https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html
              responseUrl = event['ResponseURL']
              responseBody = {}
              responseBody['Status'] = responseStatus
              responseBody['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name
              responseBody['PhysicalResourceId'] = physicalResourceId or context.log_stream_name
              responseBody['StackId'] = event['StackId']
              responseBody['RequestId'] = event['RequestId']
              responseBody['LogicalResourceId'] = event['LogicalResourceId']
              responseBody['NoEcho'] = noEcho
              responseBody['Data'] = responseData

              json_responseBody = json.dumps(responseBody)
              headers = {
                  'content-type': '',
                  'content-length': str(len(json_responseBody))
              }

              try:
                  response = requests.put(responseUrl,
                                          data=json_responseBody,
                                          headers=headers)
                  print("Status code: " + response.reason)
              except Exception as e:
                  print("send(..) failed executing requests.put(..): " + str(e))


          def get_cognito_key(user_pool_id, client_id):
              try:
                  client = boto3.client('cognito-idp', region_name=os.environ['AWS_REGION'])
                  res = client.describe_user_pool_client(
                      UserPoolId=user_pool_id,
                      ClientId=client_id
                  )
              except:
                  return False

              if 'UserPoolClient' in res.keys():
                  if 'ClientSecret' in res['UserPoolClient'].keys():
                      return res['UserPoolClient']['ClientSecret']
              print("No match for pair cognito pool id: %s client id: %s" % ())
              return False


          def lambda_handler(event, context):
              print(event)
              if event['RequestType'] == 'Delete':
                  send(event, context, "SUCCESS", {}, event['PhysicalResourceId'])
                  return True

              phys_res_id = event['StackId'].split(':')[-1] + '-' + event['LogicalResourceId'] + event['ResourceProperties']['UserPoolId'] + event['ResourceProperties']['ClientId']
              cog_key = get_cognito_key(event['ResourceProperties']['UserPoolId'], event['ResourceProperties']['ClientId'])
              if cog_key == False:
                  send(event, context, "FAILED", {'key': cog_key}, phys_res_id)
                  return False

              send(event, context, "SUCCESS", {'key': cog_key}, phys_res_id)
              return True
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      Runtime: python3.7
      Timeout: 6
    DependsOn:
      - IamRoleLambdaExecution
Outputs:
  LambdaFunctionArn:
    Value: !GetAtt
      - LookupLambdaFunction
      - Arn
